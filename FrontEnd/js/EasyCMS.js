/* Gobals  */
var gMenuItem; // Maintain menu's data

/**
 * onReady
 * 
 * When website loads, you get an empty page, this function loads 
 * the menu (based on json), main page and footer.
 * All those pages are generated by the backend
 */
$(function () {
  // Load menu from json file
  $.get("json/menu.json", function (datas, status) {
    gMenuItem = datas.menuItems; // Store menu for future use
    gMenuItem.forEach(function (menuItem) {
      setItem("#menu", menuItem);
    });
  });

  // Load main page  
  $("#content").load("content/main.html");

  // Load footer
  $("#footer").load("content/footer.html");

  // Allow multi-level menu 
  // TODO see a much proper way than timeOut
  setTimeout(function () {
    // Multi Level dropdowns - add from Bootstrap 4 default
    // This must be launch after DOM is ready (wait 250ms)
    $("ul.dropdown-menu [data-toggle='dropdown']").on("click", function (event) {
      event.preventDefault();
      event.stopPropagation();

      $(this).siblings().toggleClass("show");

      if (!$(this).next().hasClass('show')) {
        $(this).parents('.dropdown-menu').first().find('.show').removeClass("show");
      }
      $(this).parents('li.nav-item.dropdown.show').on('hidden.bs.dropdown', function (e) {
        $('.dropdown-submenu .show').removeClass("show");
      });

    });
  }, 250);

});

/****************
* menu creation *
*****************/
/**
 *  setItem(menu, item)
 * 
 * fill menu <nav> with firstlevel items
 *
 * @param  {string}  menu id of the HTML menu element
 * @param  {object}  item item to add on menu
 * @return {void}
 */
function setItem(menu, item) {
  var isMenu = item.type === "menu";

  var liElement = document.createElement("li");
  liElement.classList.add("nav-item");

  var aElement = document.createElement("a");
  aElement.classList.add("nav-link");
  aElement.classList.add("hover");
  aElement.setAttribute("href", "#");
  aElement.setAttribute("id", "menu-" + item.name);
  aElement.textContent = item.label;

  if (isMenu) {
    liElement.classList.add("dropdown");
    aElement.classList.add("dropdown-toggle");
    aElement.setAttribute("data-toggle", "dropdown");
    aElement.setAttribute("aria-haspopup", "true");
    aElement.setAttribute("aria-expanded", "false");

    var spanElement = document.createElement("span");
    spanElement.classList.add("material-icons");
    spanElement.textContent = "keyboard_arrow_down";

    var divElement = document.createElement("div");
    divElement.classList.add("dropdown-menu");
    divElement.setAttribute("aria-labelledby", "menu-" + item.name);
    divElement.setAttribute("id", "submenu-" + item.name);

    var ulElement = document.createElement("ul");
    item.menuItems.forEach(subMenuItem => {
      ulElement.appendChild(setSubMenuItems(subMenuItem));
    });

    divElement.appendChild(ulElement);
    aElement.appendChild(spanElement);
    aElement.appendChild(divElement);

  } else {
    aElement.addEventListener("click", function () { loadContent(item.name) }, false);
  }

  if (item.name === "main") {
    aElement.classList.add("active");
  }

  liElement.appendChild(aElement);
  $(menu).append(liElement);
}

/**
* setSubMenuItems(menu,item)
*
* re-entrant function, allows to fill sub-menus
*
* @param  {object}   item     menuItem object
* @return {HTMLElement} List submenu element 
*/
function setSubMenuItems(item) {
  var linkPage = item.name;
  if (item.type === "menu") {
    linkPage = item.menuItems[0].name;
  }
  var liElement = document.createElement("li");
  var aElement = document.createElement("a");
  aElement.classList.add("dropdown-item");
  aElement.setAttribute("href", "#");
  aElement.addEventListener("click", function () { loadContent(linkPage) }, false);
  aElement.textContent = item.label;

  liElement.appendChild(aElement);
  return liElement;
}

function setSecondaryMenu(itemList) {
  $("#secondary-menu").empty();
  itemList.forEach(menuItem => {
    var liElement = document.createElement("li");
    var aElement = document.createElement("a");
    aElement.setAttribute("href", "#");
    aElement.addEventListener("click", function () { loadContent(menuItem.name) }, false);
    aElement.textContent = menuItem.label;
    liElement.appendChild(aElement);

    $("#secondary-menu").append(liElement);
  });

}

/**
 * loadContent
 * 
 * Loads content in content folder in the <div> identified by
 * contend id
 *  
 * @param {text} id name of file to be loaded
 * @return void
 */
function loadContent(id) {
  $("#content").text("Chargement : " + id);
  $("#content").load("content/" + id + ".html");
  setActiveMenu(id);
}


/**
 * Change the active item of a menu
 * @param {string} id id of the new active menu item
 * @return void
 */
function setActiveMenu(id) {
  gMenuItem.forEach(menuItem => {
    if ($("#menu-" + menuItem.name).hasClass("active")) {
      $("#menu-" + menuItem.name).removeClass("active");
    }
  });

  var activeMenuItem = findInMenu(id, gMenuItem);
  $("#menu-" + activeMenuItem.name).addClass("active");
}


/**
 * Find an item in a hierarchical menu
 * @param {string} itemName Name of the item to find
 * @param {Array} menu Menu in which to search the item
 * @return {JSON} Item found in the menu tree with the corresponding name
 */
function findInMenu(itemName, menu) {
  // try to find the item in the menu (depth 1)
  var d1Match = menu.find(d1Item => d1Item.name === itemName);

  if (d1Match) {
    $("#secondary-menu").addClass("hide");
    return d1Match;

  } else {
    // for all depth 1 nodes
    for (var d1Index = 0, d1Length = menu.length; d1Index < d1Length; d1Index++) {
      var d1Item = menu[d1Index];
      if (d1Item.type === "menu") {
        var d2Match = d1Item.menuItems.find(d2Item => d2Item.name === itemName);
        if (d2Match) {
          $("#secondary-menu").addClass("hide");
          return d1Item;

        } else {
          // for all depth 2 nodes
          for (var d2Index = 0, d2Length = d1Item.menuItems.length; d2Index < d2Length; d2Index++) {
            var d2Item = d1Item.menuItems[d2Index];
            if (d2Item.type === "menu") {
              var d3Match = d2Item.menuItems.find(d3Item => d3Item.name === itemName);
              if (d3Match) {
                setSecondaryMenu(d2Item.menuItems);
                $("#secondary-menu").removeClass("hide");
                return d1Item;
              }
            }
          }
        }
      }
    }
  }
}